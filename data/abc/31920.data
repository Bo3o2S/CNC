{'TMP': 'C:\\Users\\B0302S\\AppData\\Local\\Temp', 'COMPUTERNAME': 'LEE', 'REQUESTS_CA_BUNDLE': 'cacert.pem', 'USERDOMAIN': 'lee', 'PSMODULEPATH': 'C:\\windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\', 'VS90COMNTOOLS': 'c:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\Common7\\Tools\\', 'COMMONPROGRAMFILES': 'C:\\Program Files (x86)\\Common Files', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 69 Stepping 1, GenuineIntel', 'PROGRAMFILES': 'C:\\Program Files (x86)', 'PROCESSOR_REVISION': '4501', 'SYSTEMROOT': 'C:\\windows', 'PATH': 'C:\\Python27\\Lib\\site-packages\\PyQt4;C:\\Program Files (x86)\\Intel\\iCLS Client\\;C:\\Program Files\\Intel\\iCLS Client\\;C:\\windows\\system32;C:\\windows;C:\\windows\\System32\\Wbem;C:\\windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files\\Samsung\\AllShare Framework DMS\\1.3.23\\;C:\\Program Files\\Samsung\\AllShare Framework DMS\\1.3.23\\64bit\\;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\;C:\\Program Files\\TortoiseSVN\\bin;C:\\Program Files\\Bandizip\\7z;C:\\Python27;C:\\Python27\\Scripts', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'TEMP': 'C:\\Users\\B0302S\\AppData\\Local\\Temp', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'PROCESSOR_ARCHITECTURE': 'x86', 'ALLUSERSPROFILE': 'C:\\ProgramData', 'LOCALAPPDATA': 'C:\\Users\\B0302S\\AppData\\Local', 'HOMEPATH': '\\Users\\B0302S', 'USERDOMAIN_ROAMINGPROFILE': 'lee', 'PROGRAMW6432': 'C:\\Program Files', 'USERNAME': 'B0302S', 'LOGONSERVER': '\\\\LEE', 'COMSPEC': 'C:\\windows\\system32\\cmd.exe', 'PROGRAMDATA': 'C:\\ProgramData', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC', 'FP_NO_HOST_CHECK': 'NO', 'WINDIR': 'C:\\windows', 'APPDATA': 'C:\\Users\\B0302S\\AppData\\Roaming', 'HOMEDRIVE': 'C:', 'OS': 'Windows_NT', 'SYSTEMDRIVE': 'C:', 'NUMBER_OF_PROCESSORS': '4', 'VBOX_INSTALL_PATH': 'C:\\Program Files\\Oracle\\VirtualBox\\', 'PROCESSOR_LEVEL': '6', 'PROCESSOR_ARCHITEW6432': 'AMD64', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', '__COMPAT_LAYER': 'DetectorsVista', 'PUBLIC': 'C:\\Users\\Public', 'USERPROFILE': 'C:\\Users\\B0302S'}